#!/usr/bin/env python

'''
Install:
 requests:    easy_install requests
 bottle:      easy_install bottle
 Cherrypy:    easy_install cherrypy
 Netifaces:   easy_install netifaces
 IPy:         easy_install ipy
 pyOpenSSL:   apt-get install python-openssl 
 MySQLdb:     apt-get install python-mysqldb
 pexpect:     apt-get install python-pexpect
'''

import time
from time import sleep
from datetime import datetime
import multiprocessing
import thread
from threading import Lock
import threading
import subprocess
from subprocess import Popen
import os
import sys
import ConfigParser
import requests
import logging.handlers
import json 
from OpenSSL import crypto
import socket
from os.path import exists, join
import MySQLdb
from bottle import Bottle, run, get, post, request, HTTPResponse, server_names, ServerAdapter, response
from cheroot import wsgi
from cheroot.ssl.builtin import BuiltinSSLAdapter
import netifaces 
from IPy import IP
import pexpect
import re
from collections import defaultdict
import io

global mysql_process
mysql_process = None
var="~#@#@!#@!#!@#@!#"

config_mutex = Lock()
conda_mutex = Lock()
block_report_mutex = Lock()

HTTP_OK = 200

BIN_DIR = "<%= node[:kagent][:base_dir] %>/bin"
CONFIG_FILE = "<%= node[:kagent][:base_dir] %>/config.ini"
SERVICES_FILE = "<%= node[:kagent][:base_dir] %>/services"
LOG_FILE = "<%= node[:kagent][:base_dir] %>/agent.log"

CERT_FILE = "<%= node[:kagent][:certs_dir] %>/pub.pem"
CA_FILE = "<%= node[:kagent][:certs_dir] %>/ca_pub.pem"
KEY_FILE = "<%= node[:kagent][:certs_dir] %>/priv.key"
SERVER_KEYSTORE = "<%= @kstore %>"
SERVER_TRUSTSTORE = "<%= @tstore %>"
CLIENT_TRUSTSTORE = "<%= node[:kagent][:keystore_dir] %>/node_client_truststore.jks"

global states
states = {}

# Conda install/remove/update/clone events
global conda_list
conda_list = []

global conda_ongoing
conda_ongoing = defaultdict(lambda: False)

global block_report
block_report = {}


cores = multiprocessing.cpu_count()

# reading config
try:
    config = ConfigParser.ConfigParser()
    config.read(CONFIG_FILE)
    server_url = config.get('server', 'url')
    login_url = server_url + config.get('server', 'path-login')
    register_url = server_url + config.get('server', 'path-register')
    heartbeat_url = server_url + config.get('server', 'path-heartbeat')
    alert_url = server_url + config.get('server', 'path-alert')

        
    server_username = config.get('server', 'username')
    server_password = config.get('server', 'password')

    logging_level = config.get('agent', 'logging-level').upper()
    max_log_size = config.getint('agent', 'max-log-size')    
    password = config.get('agent', 'password')          
    agent_pidfile = config.get('agent', 'pid-file')
    agent_restport = config.getint('agent', 'restport')
    heartbeat_interval = config.getfloat('agent', 'heartbeat-interval')
    watch_interval = config.getfloat('agent', 'watch-interval')
    mysql_socket = config.get('agent', 'mysql-socket')          
    network_interface = config.get('agent', 'network-interface')          
    group_name = config.get('agent', 'group-name')          
    env_report_freq_in_secs = config.getint('agent', 'env-report-freq-in-secs')
    conda_enabled = server_url + config.get('agent', 'conda')
    hadoop_home = config.get('agent', 'hadoop-home')
    
    group_name = config.get('agent', 'group-name')

# TODO find public/private IP addresses 
    public_ip = None
    private_ip = None 
    eth0_ip = netifaces.ifaddresses(network_interface)[netifaces.AF_INET][0]['addr'] 
    if (IP(eth0_ip).iptype() == "PUBLIC"):
        public_ip = eth0_ip
    else:
        private_ip = eth0_ip
    
    if (config.has_option("agent", "hostname")):
        hostname = config.get("agent", "hostname")
    else:
        hostname = socket.gethostbyaddr(eth0_ip)[0]
        
    if (config.has_option("agent", "host-id")):
        host_id = config.get("agent", "host-id")
    else:
        host_id = hostname

    
except Exception, e:
    print "Exception while reading {0}: {1}".format(CONFIG_FILE, e)
    sys.exit(1)

# logging
try:
    os.remove(LOG_FILE + '.1')
except:
    pass    
with open(LOG_FILE, 'w'):  # clear log file
    pass
logger = logging.getLogger('agent')
logger_formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
logger_file_handler = logging.handlers.RotatingFileHandler(LOG_FILE, "w", maxBytes=max_log_size, backupCount=1)
logger_stream_handler = logging.StreamHandler()
logger_file_handler.setFormatter(logger_formatter)
logger_stream_handler.setFormatter(logger_formatter)
logger.addHandler(logger_file_handler)
logger.addHandler(logger_stream_handler)
logger.setLevel(logging.INFO)

logger.info("Hops-Kagent started.")
logger.info("Heartbeat URL: {0}".format(heartbeat_url))
logger.info("Alert URL: {0}".format(alert_url))
logger.info("Host Id: {0}".format(host_id))
logger.info("Hostname: {0}".format(hostname))
logger.info("Public IP: {0}".format(public_ip))
logger.info("Private IP: {0}".format(private_ip))

verbose=False

# reading services
try:
    services = ConfigParser.ConfigParser()
    services.read(SERVICES_FILE)

    for s in services.sections():
        if services.has_option(s, "service") :        
            states[services.get(s, "service")] = {'status':'Stopped', 'start-time':''}

except Exception, e:
    print "Error in the services file. Check its formatting: {0}: {1}".format(SERVICE_FILE, e)
    logger.error("Exception while reading {0} file: {1}".format(SERVICES_FILE, e))
    sys.exit(1)     


logged_in = False

# http://stackoverflow.com/questions/12435211/python-threading-timer-repeat-function-every-n-seconds
def setInterval(interval):
    def decorator(function):
        def wrapper(*args, **kwargs):
            stopped = threading.Event()

            def loop(): # executed in another thread
                while not stopped.wait(interval): # until stopped
                    function(*args, **kwargs)

            t = threading.Thread(target=loop)
            t.daemon = True # stop if the program exits
            t.start()
            return stopped
        return wrapper
    return decorator


class Util():
    
    def logging_level(self, level):
        return {
                'INFO': logging.INFO,
                'WARN': logging.WARN,
                'WARNING': logging.WARNING,
                'ERROR': logging.ERROR,
                'DEBUG' : logging.DEBUG,
                'CRITICAL': logging.CRITICAL,
                }.get(level, logging.NOTSET)

    @staticmethod
    def tail(file_name, n):
        stdin, stdout = os.popen2("tail -n {0} {1}".format(n, file_name))
        stdin.close()
        lines = stdout.readlines(); 
        stdout.close()
        log = "".join(str(x) for x in lines)
        return log


class Heartbeat():
    daemon_threads = True 
    def __init__(self):
        while True:    
            Heartbeat.send()
            time.sleep(heartbeat_interval) 


    @staticmethod
    def login():
        json_headers = {'User-Agent': 'Agent', 'content-type': 'application/json'}
        form_headers = {'User-Agent': 'Agent', 'content-type': 'application/x-www-form-urlencoded'}
        payload = {}
        global logged_in
        global session
        try:
            session = requests.Session()
            resp = session.post(login_url, data={'email': server_username, 'password': server_password}, headers=form_headers, verify=False)
#            resp = session.put(register_url, data=json.dumps(payload), headers=json_headers, verify=False)
            if not resp.status_code == HTTP_OK:
                logged_in = False
                logger.warn('Could not login agent to Hopsworks (Status code: {0}).'.format(resp.status_code))
            else:
                logger.info('Successful login of agent to Hopsworks (Status code: {0}).'.format(resp.status_code))
                logged_in = True
        except Exception as err:
            logger.warn('Could not login agent to Hopsworks {0}'.format(err))
            logged_in = False

    @staticmethod
    def serviceKey(*keys):
            global states
            ob = states
            for key in keys:
                ob = ob[key]
            return ob

    @staticmethod
    def send():
        global logged_in
        global session
        global conda_list
        global block_report
        if not logged_in:
           logger.info('Logging in to Hopsworks....')
           Heartbeat.login()
        else:
            try:
                disk_info = DiskInfo() 
                memory_info = MemoryInfo()
                load_info = LoadInfo()
                services_list = Config().read_all_for_heartbeat()
                now = long(time.mktime(datetime.now().timetuple()))                
                headers = {'content-type': 'application/json'}
                payload = {}
                payload["host-id"] = host_id            
                payload["agent-time"] = now
                payload["load1"] = load_info.load1
                payload["load5"] = load_info.load5
                payload["load15"] = load_info.load15
                payload["disk-used"] = disk_info.used
                payload['memory-used'] = memory_info.used - memory_info.cached - memory_info.buffers
                payload["services"] = services_list            
                payload["group-name"] = group_name
                payload["hostname"] = hostname

                conda_mutex.acquire()
                if bool(conda_list):
                    payload["conda-ops"] = conda_list
                    logger.info(json.dumps(payload, indent=2))                    
                conda_mutex.release()                

                block_report_mutex.acquire()
                if bool(block_report):
                    logger.info("Sending a block report...")
                    payload["block-report"] = block_report
                block_report_mutex.release()
                
                if (public_ip != None):
                    payload["public-ip"] = public_ip                      
                else:
                    payload["public-ip"] = ""

                if (private_ip != None):
                    payload["private-ip"] = private_ip 
                else:
                    payload["private-ip"] = ""

                payload["cores"] = cores
                payload["disk-capacity"] = disk_info.capacity    
                payload['memory-capacity'] = memory_info.total                            
                logger.info("Sending heartbeat...")
                resp = session.post(heartbeat_url, data=json.dumps(payload), headers=headers, verify=False)
                block_report_mutex.acquire()
                block_report = {}
                block_report_mutex.release()
                if not resp.status_code == HTTP_OK:
                    raise Exception('Heartbeat could not be sent (Status code: {0})'.format(resp.status_code))
                    logged_in = False
                    conda_mutex.acquire()
                    conda_list = []
                    conda_mutex.release()
                else:
                    # Clear the list of conda ops to upload if the rest call is successful
                    conda_mutex.acquire()
                    conda_list = []
                    conda_mutex.release()
                    theResponse = resp.json()
                    try:
                        Conda().commands(theResponse)
                    except Exception as err:
                        logger.info("No commands to execute")
                        for data in theResponse:
                            proj = data['proj']
                            conda_ongoing[proj] = False                            
                        
            except Exception as err:
                logger.error("{0}. Retrying in {1} seconds...".format(err, heartbeat_interval))
                logged_in = False
                block_report_mutex.acquire()
                block_report = {}
                block_report_mutex.release()
                conda_mutex.acquire()
                conda_list = []
                conda_mutex.release()

                
class Alert:
    @staticmethod    
    def send(cluster, group, service, time, status):
        global session
        if not logged_in:
           logger.info('Logging in to Hopsworks....')
           Heartbeat.login()
        else:
            try:
                headers = {'content-type': 'application/json'}
                payload = {}
                payload["Provider"] = "Agent"            
                payload["host-id"] = host_id
                payload["Time"] = time
                payload["Plugin"] = "Monitoring"
                payload["Type"] = "Role"
                payload["TypeInstance"] = "{0}/{1}/{2}".format(cluster, group, service)
                payload["DataSource"] = "Agent"
                payload["CurrentValue"] = status
                if status == True:
                    payload["Severity"] = "OK"
                    payload["Message"] = "Service is running: {0}/{1}/{2}".format(cluster, group, service)
                else:
                    payload["Severity"] = "FAILURE"
                    payload["Message"] = "Service is not running: {0}/{1}/{2}".format(cluster, group, service)
                    
                logger.info("Sending Alert...")
                #auth = (server_username, server_password)
                #            session = requests.Session()
                #            session.post(alert_url, data=json.dumps(payload), headers=headers, auth=auth, verify=False)        
                #requests.post(alert_url, data=json.dumps(payload), headers=headers, auth=auth, verify=False)
                session.post(alert_url, data=json.dumps(payload), headers=headers, verify=False)
            except:
                logger.error("Cannot access the REST service for alerts. Alert not sent.")

            
class MemoryInfo(object):
    def __init__(self):
        process = subprocess.Popen("free", shell=True, stdout=subprocess.PIPE)
        stdout_list = process.communicate()[0].split('\n')
        for line in stdout_list:
            data = line.split()
            try:
                if data[0] == "Mem:":
                    self.total = int(data[1]) * 1024
                    self.used = int(data[2]) * 1024
                    self.free = int(data[3]) * 1024
                    self.buffers = int(data[5]) * 1024
                    self.cached = int(data[6]) * 1024
                    break
            except IndexError:
                continue


class DiskInfo(object):
    def __init__(self):
        disk = os.statvfs("/")
        self.capacity = disk.f_bsize * disk.f_blocks
        self.used = disk.f_bsize * (disk.f_blocks - disk.f_bavail)


class LoadInfo(object):
    def __init__(self):
        self.load1 = os.getloadavg()[0]
        self.load5 = os.getloadavg()[1]
        self.load15 = os.getloadavg()[2]
        

class ExtProcess():  # external process
        
    @staticmethod        
    def watch(cluster, group, service):
        global states        
        while True:
            try:
                section = Config().section_name(cluster, group, service)
                if Service().alive(cluster,group,service) == True:
                     if (states[service]['status'] == 'Stopped'):
                       logger.info("Process started: {0}/{1}/{2}".format(cluster, group, service))
                       Service().started(cluster, group, service)
                else:
                    raise Exception("Process is not running for {0}/{1}/{2}".format(cluster, group, service))
            except:  
                logger.info("Proccess.watch: Process is not running: {0}/{1}/{2}".format(cluster, group, service))
                if (states[service]['status'] == 'Started'):
                    logger.info("Process failed: {0}/{1}/{2}".format(cluster, group, service))
                    Service().failed(cluster, group, service)
            sleep(watch_interval)

class Config(): 

    def section_name(self, cluster, group, service=None):
        if service == None:
            return "{0}-{1}".format(cluster, group)
        else:
            return "{0}-{1}-{2}".format(cluster, group, service)   
        
    # select items so that the key does not contain 'file' or 'script'
    def read_all_for_heartbeat(self):
        config_mutex.acquire()       
        services_list = []     
        try:
            for s in services.sections():
                   item = {}
                   item['status'] = Heartbeat.serviceKey(services.get(s, "service"), 'status')
                   services_list.append(item)   
                   for key, val in services.items(s):
                       if (not 'file' in key) and (not 'script' in key) and (not 'command' in key):
                           item[key] = val
                       services_list.append(item)                
        finally:
            config_mutex.release()
        return services_list
        
    def get_section(self, section):
        config_mutex.acquire()
        items = {}
        try:
            for key, val in services.items(section):
                items[key] = val
        finally:
            config_mutex.release()
        return items
    
    def get(self, section, option):
        config_mutex.acquire()
        val = ""
        try:         
            val = services.get(section, option)
        finally:
            config_mutex.release()
        return val                


class Service:
    
    # need to be completed. Set the status to Initialize?
    def init(self, cluster, group, service):
        section = Config().section_name(cluster, group, service)
        script = Config().get(section, "init-script")
        try:
            p = Popen(script, shell=True, close_fds=True)
            p.wait()
            returncode = p.returncode
            if not returncode == 0:
                raise Exception("Init script returned a none-zero value")
            return True
        except Exception as err:
            logger.error(err)
            return False

            
    def start(self, cluster, group, service):
        script = BIN_DIR + "/start-service.sh"
        try:
            p = Popen(['sudo',script,service],stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            (output,err)=p.communicate()
            returncode = p.wait()
            logger.info("{0}".format(output))
            if not returncode == 0:
                raise Exception("Start script returned a none-zero value")
            Service().started(cluster, group, service)
            # wait for the alert to get returned to Hopsworks, before returning (as this will cause a correct refresh of the service's status)
            sleep(heartbeat_interval+1)
            return True
        except Exception as err:
            logger.error(err)
            return False
        
    def stop(self, cluster, group, service):
        script = BIN_DIR + "/stop-service.sh"
        global states        
        try:
            subprocess.check_call(['sudo', script, service], close_fds=True)  # raises exception if not returncode == 0
            now = long(time.mktime(datetime.now().timetuple()))
            states[service] = {'status':'Stopped', 'stop-time':now}
            # wait for the alert to get returned to Hopsworks, before returning (as this will cause a correct refresh of the service's status)
            Service().failed(cluster, group, service)
            sleep(heartbeat_interval+1)
            return True
        except Exception as err:
            logger.error(err)
            return False

    def restart(self, cluster, group, service):
        script = BIN_DIR + "/restart-service.sh"
        try:
            p = Popen(['sudo',script,service], close_fds=True)
            p.wait()
            returncode = p.returncode
            if not returncode == 0:
                raise Exception("Restart script returned a none-zero value")
            Service().started(cluster, group, service)
            # wait for the alert to get returned to Hopsworks, before returning (as this will cause a correct refresh of the service's status)
            sleep(heartbeat_interval)
            return True
        except Exception as err:
            logger.error(err)
            return False

    def alive(self, cluster, group, service):
        script = BIN_DIR + "/status-service.sh"
        try:
            p = Popen(['sudo',script,service], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
            if (verbose == True):
                with p.stdout:
                    for line in iter(p.stdout.readline, b''):
                        logger.info("{0}".format(line))
            p.wait()
            if not p.returncode == 0:
                return False
        except Exception as err:
            logger.error(err)
            return False
        return True

    def failed(self, cluster, group, service):
        global states        
        now = long(time.mktime(datetime.now().timetuple()))
        states[service] = {'status':'Stopped', 'start-time':now}
        Alert.send(cluster, group, service, now, False)

    def started(self, cluster, group, service):
        global states        
        now = long(time.mktime(datetime.now().timetuple()))
        states[service] = {'status':'Started', 'start-time':now}
        Alert.send(cluster, group, service, now, True)


class MySQLConnector():
    @staticmethod
    def read(database, table):
        try:
            db = MySQLdb.connect(unix_socket=mysql_socket, db=database)
            cur = db.cursor()            
            query = "SELECT * FROM {0}".format(table)
            cur.execute(query)    
            return json.dumps(cur.fetchall())
        except Exception as err:
            logger.error("Could not access {0} table from {1}: {2}".format(table, database, err))
            return json.dumps(["Error", "Error: Could not access {0} table from {1}.".format(table, database)])     
            
    @staticmethod
    def read_ndbinfo(table):
        return MySQLConnector.read("ndbinfo", table)
    
    
class CommandHandler():

    def response(self, code, msg):
        resp = HTTPResponse(status=code, output=msg)
        logger.info("{0}".format(resp))
        return resp
         
    def init(self, cluster, group, service):
        section = Config().section_name(cluster, group, service)
        if not services.has_section(section):
            return CommandHandler().response(400, 'Service not installed.')
        else:
            if Service().init(cluster, group, service) == True:
                return CommandHandler().response(200, 'Service initialized.')
            else:
                return CommandHandler().response(400, 'Error: Cannot initialize the service.')
    
    def start(self, cluster, group, service):
        global states
        section = Config().section_name(cluster, group, service)
        if not services.has_section(section):
            return CommandHandler().response(400, 'Service not installed.')
        elif states[service]['status'] == 'Started':
            return CommandHandler().response(400, 'Service already started.')
        else:
            res = Service().start(cluster, group, service)
            if res == False:
                return CommandHandler().response(400, 'Error: Cannot start the service.')
            else:
                return CommandHandler().response(200, "Service started.")

    def stop(self, cluster, group, service):
        global states
        section = Config().section_name(cluster, group, service)
        if not services.has_section(section):
            return CommandHandler().response(400, 'Service not installed.')
        elif not states[service]['status'] == 'Started':
            return CommandHandler().response(400, 'Service is not running.')
        else:
            if Service().stop(cluster, group, service) == True:
                return CommandHandler().response(200, 'Service stopped.')
            else:
                return CommandHandler().response(400, 'Error: Cannot stop the service.')

    def restart(self, cluster, group, service):
        section = Config().section_name(cluster, group, service)
        if not services.has_section(section):
            return CommandHandler().response(400, 'Service not installed.')
        else:
            res = Service().restart(cluster, group, service)
            if res == False:
                return CommandHandler().response(400, 'Error: Cannot restart the service.')
            else:
                return CommandHandler().response(200, "Service started.")

    def read_log(self, cluster, group, service, lines):
        try:
            lines = int(lines)
            if service == None:
                section = Config().section_name(cluster, group)
            else:
                section = Config().section_name(cluster, group, service)                
            log_file_name = Config().get(section, "stdout-file")
            log = Util().tail(log_file_name, lines)
            return CommandHandler().response(200, log)
        
        except Exception as err:
            logger.error(err)
            return CommandHandler().response(400, "Cannot read file.")

    def read_agent_log(self, lines):
        try:
            log = Util().tail(LOG_FILE, lines)
            return CommandHandler().response(200, log)
        
        except Exception as err:
            logger.error(err)
            return CommandHandler().response(400, "Cannot read file.")

    def read_config(self, cluster, group, service):
        try:
            section = Config().section_name(cluster, group, service)
            config_file_name = Config().get(section, "config-file")
            with open(config_file_name) as config_file:
                conf = "".join(str(x) for x in (list(config_file)))
            return CommandHandler().response(200, conf)
        
        except Exception as err:
            logger.error(err)
            return CommandHandler().response(400, "Cannot read file.")

    def info(self, cluster, group, service):
        try:
            section = Config().section_name(cluster, group, service)
            resp = json.dumps(Config().get_section(section))
            return CommandHandler().response(200, resp)
        
        except Exception as err:
            logger.error(err)
            return CommandHandler().response(400, "Cannot read file.")

    def read_ndbinfo(self, table):
        res = MySQLConnector.read_ndbinfo(table)
        return CommandHandler().response(200, res)
                
    def execute(self, cluster, group, service, command, params):
        try:
            if service == None:
                section = Config().section_name(cluster, group)
            else:    
                section = Config().section_name(cluster, group, service)
            script = Config().get(section, "command-script")
            logger.info("Script name executing is: {0}".format(script))
            env = Config().get(section, "command-env")
            command = env + " " + script + " " + params
            command = re.sub(r'([\"])', r'\\\1', command)
            as_user = Config().get(section, "command-user")
# TODO: could check if as_user == "root" or as_user == "sudo" here...
            if not as_user:
                logger.warn("No user supplied to execute command: {0}".format(command))
                raise Exception("Not allowed execute command as user: {0}".format(as_user))
            if as_user:
                command = "su - " + as_user + " -c \"" + command + "\""
# TODO: shell=True is insecure when using untrusted input
# as an attacker can input "hdfs dfs -ls / ; rm -rf /"
            p = Popen(command , shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
            out, err = p.communicate()        
            return CommandHandler().response(200, out)
        except Exception as err:
            logger.error(err)
            return CommandHandler().response(400, "Could not execute.")                


    def refresh(self):
        Heartbeat.send(False);
        return CommandHandler().response(200, "OK")


class Authentication():
    def check(self):
        result = False
        try:
            inPassword = request.params['password']  
            if (inPassword == password):
                return True
        except Exception:
            result = False

        if result == False:
            logger.info("Authentication failed: Invalid password: {0}".format(password))
        return result
    
    def failed(self):
        return HTTPResponse(status=400, output="Invalid password")


class SSLCherryPy(ServerAdapter):  
    def run(self, handler):  
        server = wsgi.Server((self.host, self.port), handler)
        server.ssl_adapter = BuiltinSSLAdapter(CERT_FILE, KEY_FILE)
        try:  
            server.start()  
        finally:  
            server.stop()


class Conda():
    def libOp(self, user, command_id, op, proj, channelUrl, lib, version):
        def target(user, command_id, op, proj, channelUrl, lib, version):
            global conda_ongoing
            if not channelUrl:
                channelUrl="default"
            if not version:
                version=""
            global conda_list
            script = BIN_DIR + "/conda.sh"
            conda_op = {}
            try:
                command = "sudo {0} {1} {2} {3} {4} {5} {6}".format(script, user, op, proj, channelUrl, lib, version)
                logger.info("{0}".format(command))                                            
                msg = subprocess.check_output(['sudo', script, user, op, proj, channelUrl, lib, version])
                logger.info("Lib op finished without errror.")
                logger.info("{0}".format(msg))
                conda_op = {'proj': proj, 'op': op, 'channelurl': channelUrl, 'lib': lib, 'version': version, 'status': 'SUCCESS', 'id': str(command_id) }                
            except subprocess.CalledProcessError, e:
                logger.info("Execption in libOp {0}".format(e.output))
                logger.info("Execption in libOp. Ret code: {0}".format(e.returncode))
                conda_op = {'proj': proj, 'op': op, 'channelurl': channelUrl, 'lib': lib, 'version': version, 'status': 'FAILED', 'id':  str(command_id) }                
            finally:
                conda_ongoing[proj] = False                
                if command_id != -1:                
                    conda_mutex.acquire()                     
                    conda_list.append(conda_op)                                           
                    conda_mutex.release()                

        thread = threading.Thread(target=target, args=(user, command_id, op, proj, channelUrl, lib, version,))
        thread.start()
            
    def envOp(self, user, command_id, op, proj, arg, offline):
        global conda_ongoing
        if not arg:
            arg=""
        script = BIN_DIR + "/anaconda_env.sh"
        logger.info("sudo {0} {1} {2} {3} {4} '{5}' {6}".format(script, user, op, proj, arg, offline, hadoop_home))
        msg=""
        conda_op = {}        
        try:
            msg = subprocess.check_output(['sudo', script, user, op, proj, arg, offline, hadoop_home])
            conda_op = {'proj': proj, 'op': op, 'channelurl': 'default', 'lib': '', 'version': '', 'status': 'SUCCESS', 'id': str(command_id), 'arg': arg}            
        except subprocess.CalledProcessError, e:
            logger.info("Execption in envOp {0}".format(e.output))
            logger.info("Execption in envOp. Ret code: {0}".format(e.returncode))
            msg = e.output
            truncated = (msg[:250] + '...') if len(msg) > 255 else msg
            conda_op = {'proj': proj, 'op': op, 'channelurl': 'default', 'lib': '', 'version': '', 'status': 'FAILED', 'id':  str(command_id), 'arg': truncated}
        finally:
            conda_mutex.acquire()
            if command_id != -1:
                conda_list.append(conda_op)                   
            conda_mutex.release()
            conda_ongoing[proj] = False
        return msg

    def blockReport(self):
        global block_report
        script = BIN_DIR + "/anaconda_env.sh"
        try:
            msg = subprocess.check_output(['sudo', script, "<%= node['conda']['user'] %>", "LIST_ENVS", "", ""])
        except Exception as err:
            res=1
            logger.warn("Could not list conda environments to do a block report. Err: ".format(err))
            return
        with open('/tmp/conda_envs.json') as envs_file:    
            envsDict = json.load(envs_file)
        envs = envsDict['envs']
        report = {}
        for i, val in enumerate(envs):
            val = os.path.basename(val)
            msg = subprocess.check_output(['sudo', script, 'glassfish', "LIST", val, ""])
            with open('/tmp/' + val + '__conda_list.json') as libs_file:    
                arrayLibs = json.load(libs_file)
                report[val]=arrayLibs
        logger.info(json.dumps(report, indent=2))

        # The above code building up a block report could take a long time to execute, meaning
        # that partially written block-reports get sent up. We want to make them available for heartbeats
        # only at the very end of building up the state needed.

        block_report_mutex.acquire()
        block_report = report
        block_report_mutex.release()

    
    def commands(self, dataArray):
        global conda_ongoing
        if (dataArray is None):
            return;
        logger.info("Commands to execute: {0}".format(len(dataArray)))
        for data in dataArray:
            logger.info(json.dumps(data, indent=2))            
            op = data['op'].upper()
            user = data['user']
            proj = data['proj']
            command_id = data['id']
            logger.info("Command to execute: {0}/{1}/{2}".format(op,proj,command_id))
            if (conda_ongoing[proj] == False):
                conda_ongoing[proj] = True
                logger.info("Executing Command {0}/{1}/{2}".format(user,op,proj))
                arg=""
                if 'arg' in data:
                    arg=data['arg']
                if op == "REMOVE" or op == "CLONE" or op == "CREATE":
                    self.envOp(user, command_id, op, proj, arg, "")
                if op == "LIB_SYNC":
                    arg=data['lib']
                    # open with 'w+' to overwrite the file if it exists
                    with io.open('/tmp/' + proj + '_server.json', 'w+', encoding='utf-8') as outfile:
                        json.dumps(arg, outfile, ensure_ascii=False)                    
                    self.envOp(user, command_id, op, proj, arg, "")                    
                else:  # Conda package  commands (install, remove, upgrade)
                    version = data['version']
                    channelUrl = data['channelUrl']
                    lib = data['lib']
                    self.libOp(user, command_id, op, proj, channelUrl, lib, version)
            else:
                logger.warn("Conda busy executing a command for project: {0}".format(proj))

                            
if __name__ == '__main__':
    
    if len(sys.argv) > 1:
        if (sys.argv[1] == "-v" or sys.argv[1] == "-verbose" or sys.argv[1] == "--verbose"):
            verbose=True
        elif (sys.argv[1] == "-sync"):
            Conda().blockReport()
        else:
            print "usage: <prog> [-v|-verbose|-sync]"
            print "-sync will try to sync up anaconda libraries with those already installed for all projects"
            sys.exit()

    agent_pid = str(os.getpid())
    file(agent_pidfile, 'w').write(agent_pid)
    logger.info("Hops Kagent PID: {0}".format(agent_pid))
    logger.setLevel(Util().logging_level(logging_level))

    # Heartbeat, process watch (alerts) and REST API are available after the agent registers successfully 
    hb_thread = threading.Thread(target=Heartbeat, args=())
    hb_thread.setDaemon(True)
    hb_thread.start()

    for s in services.sections():
        cluster = Config().get(s, "cluster")
        group = Config().get(s, "group")       
        if services.has_option(s, "service"):
            service = Config().get(s, "service")             
            my_thread = threading.Thread(target=ExtProcess.watch, args=(cluster, group, service))
            my_thread.setDaemon(True)
            my_thread.start()
        else:
            logger.info("Not watching {0}/{1}".format(cluster, group))        


# send conda environment reports every env_report_freq_in_secs seconds
    if conda_enabled == "true":
        @setInterval(env_report_freq_in_secs)
        def startBlockReporting():
           Conda().blockReport()

        stop = startBlockReporting() # start timer



# The REST code uses a CherryPy webserver, but Bottle for the REST endpoints
# WSGI server for SSL
# For a a tutorial on the REST code below, see http://bottlepy.org/docs/dev/tutorial.html

    server_names['sslcherrypy'] = SSLCherryPy  
    app = Bottle()
    @get('/ping')
    def ping():
        logger.info('Incoming REST Request:  GET /ping')       
        return "Hops-Agent: Pong"
        
    @get('/do/<cluster>/<group>/<service>/<command>')
    def do(cluster, group, service, command):
        logger.info('Incoming REST Request:  GET /do/{0}/{1}/{2}/{3}'.format(cluster, group, service, command))
        if not Authentication().check():
            return Authentication().failed()
        section = Config().section_name(cluster, group, service)
        logger.info("Section is {0}".format(section))
        if not services.has_section(section):
            logger.error("Couldn't find command {0} in {1}/{2} in section {3}".format(command, group, service, section))
            return HTTPResponse(status=400, output='Invalid command.')            

        groupInServicesFile = Config().get(section, "group")
        serviceInServicesFile = Config().get(section, "service")
        commandInServicesFile = Config().get(section, "{0}-script".format(command))

        if (not service == groupInServicesFile) or (not service == serviceInServicesFile) or (not commandInServicesFile):
            logger.error("Couldn't find command {0} in {1}/{2}".format(command, group, service))
            return HTTPResponse(status=400, output='Invalid command.')            
        
        if command == "start":
            return CommandHandler().start(cluster, group, service);
        elif command == "stop":
            return CommandHandler().stop(cluster, group, service);                
        elif command == "init":
            return CommandHandler().init(cluster, group, service); 
        else:
            return HTTPResponse(status=400, output='Invalid command.')        

    @get('/restartService/<cluster>/<group>/<service>')
    def restartService(cluster, group, service):
        logger.info('Incoming REST Request:  GET /restartService/{0}/{1}'.format(cluster, group, service))
        if not Authentication().check():
            return Authentication().failed()
        
        if not services.has_section(Config().section_name(cluster, group, service)):
            return HTTPResponse(status=400, output='Cluster/Group/Service not available.')

        return CommandHandler().restart(cluster, group, service);

    @get('/startService/<cluster>/<group>/<service>')
    def startService(cluster, group, service):
        logger.info('Incoming REST Request:  GET /startService/{0}/{1}'.format(cluster, group, service))
        if not Authentication().check():
            return Authentication().failed()
        
        if not services.has_section(Config().section_name(cluster, group, service)):
            return HTTPResponse(status=400, output='Cluster/Group/Service not available.')

        return CommandHandler().start(cluster, group, service);

    @get('/stopService/<cluster>/<group>/<service>')
    def stopService(cluster, group, service):
        logger.info('Incoming REST Request:  GET /stopService/{0}/{1}/{2}'.format(cluster, group, service))
        if not Authentication().check():
            return Authentication().failed()
        
        if not services.has_section(Config().section_name(cluster, group, service)):
            return HTTPResponse(status=400, output='Cluster/Group/Service not available.')

        return CommandHandler().stop(cluster, group, service);

    @get('/log/<cluster>/<group>/<service>/<lines>')
    def log(cluster, group, service, lines):
        logger.info('Incoming REST Request:  GET /log/{0}/{1}/{2}'.format(cluster, group, service, lines))
        if not Authentication().check():
            return Authentication().failed()
        
        if not services.has_section(Config().section_name(cluster, group, service)):
            return HTTPResponse(status=400, output='Cluster/Group/Service not available.')

        return CommandHandler().read_log(cluster, group, service, lines);


    @get('/log/<cluster>/<group>/<lines>')
    def log(cluster, group, lines):
        logger.info('Incoming REST Request:  GET /log/{0}/{1}'.format(cluster, group))
        if not Authentication().check():
            return Authentication().failed()
        
        if not services.has_section(Config().section_name(cluster, group)):
            return HTTPResponse(status=400, output='Cluster/Group not available.')

        return CommandHandler().read_log(cluster, group, None, lines);


    @get('/agentlog/<lines:int>')
    def agentlog(lines):
        logger.info('Incoming REST Request:  GET /agentlog/{0}'.format(lines))
        if not Authentication().check():
            return Authentication().failed()
                                    
        return CommandHandler().read_agent_log(lines);

    @get('/config/<cluster>/<group>/<service>')
    def config(cluster, group, service):
        logger.info('Incoming REST Request:  GET /log/{0}/{1}/{2}'.format(cluster, group, service))
        if not Authentication().check():
            return Authentication().failed()
        
        if not services.has_section(Config().section_name(cluster, group, service)):
            return HTTPResponse(status=400, output='Cluster/Group/Service not available.')
            
        return CommandHandler().read_config(cluster, group, service);

    @get('/info/<cluster>/<group>/<service>')
    def info(cluster, group, service):
        logger.info('Incoming REST Request:  GET /status/{0}/{1}'.format(cluster, group, service))
        if not Authentication().check():
            return Authentication().failed()
        
        if not services.has_section(Config().section_name(cluster, group, service)):
            return HTTPResponse(status=400, output='Cluster/Group/Service not available.')
            
        return CommandHandler().info(cluster, group, service);

    @get('/refresh')  # request heartbeat
    def refresh():
        logger.info('Incoming REST Request:  GET /refresh')
        if not Authentication().check():
            return Authentication().failed()
             
        return CommandHandler().refresh();

    @get('/mysql/ndbinfo/<table>')
    def mysql_read(table):
        logger.info('Incoming REST Request:  GET /mysql/ndbinfo/{0}'.format(table))
        if not Authentication().check():
            return Authentication().failed()
            
        return CommandHandler().read_ndbinfo(table)
    
    @post('/execute/<state>/<cluster>/<group>/<service>/<command>')
    def execute_hdfs(state, cluster, group, service, command):
        logger.info('Incoming REST Request:  POST /execute/{0}/{1}/{2}/{3}/{4}'.format(state, cluster, group, service, command))
        if not Authentication().check():
            return Authentication().failed()            
        if request.body.readlines():
            params =  request.body.readlines()[0]
        else:
            params = ""                        
        if state == "run" :
            if service == "-":
                return CommandHandler().execute(cluster, group, None, command, params);
            else:       
                return CommandHandler().execute(cluster, group, service, command, params);
        return CommandHandler().response(404, "Error")  


    
    @get('/conda/<user>/<command_id>/<op>/<proj>/<lib>')
    def conda(user,command_id,op,proj,lib):
        logger.info('Incoming REST Request:  GET /conda/{0}/{1}/{2}'.format(op, proj, lib))
        if not Authentication().check():
            return Authentication().failed()
        channelurl = request.params['channelurl']
        version = request.params['version']
        try:
            msg = Conda().conda(user,command_id, op, proj, channelurl, lib, version)
            resp = HTTPResponse(status=HTTP_OK, output=msg)
            logger.info("{0}".format(resp))
            return resp            
        except Exception as err:
            logger.error("{0}".format(err))            
            return CommandHandler().response(400, "Error")  

    # Normal client sets 'channel' to 'defaults' for http://conda.anaconda.org/ or 'system' to get system packages
    # curl -k -X GET https://10.0.2.15:8090/create/project?password=blah
    # curl -k -X GET https://10.0.2.15:8090/clone/projectSrc/projectDest?password=blah    
    @get('/anaconda/<user>/<command_id>/<op>/<proj>/<arg>')
    def anaconda(user, command_id, op, proj, arg):
        logger.info('Incoming REST Request:  GET /anaconda/{0}/{1}/{2}'.format(user, op, proj))
        if not Authentication().check():
            return Authentication().failed()
        # Blocking REST call here
        arg = "default"
        if (op == "clone"):
            arg = request.params['srcproj']
        try:
            msg = Conda().envOp(user, command_id, op, proj, arg, "")
            resp = HTTPResponse(status=HTTP_OK, output=msg)
            logger.info("{0}".format(resp))
            return resp            
        except Exception as err:
            logger.error("{0}".format(err))            
            return CommandHandler().response(400, "Error")  

    logger.info("RESTful service started.")
    run(host='0.0.0.0', port=agent_restport, server='sslcherrypy')

