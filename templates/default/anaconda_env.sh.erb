#!/usr/bin/env bash

if [ $# -lt 6  ]; then
    echo "<op> <proj> <arg> <offline> <hadoop_home> <install_jupyter> <yml_file_path>"
    echo "incorrect usage."
    echo "<arg> is the python version for 'create', the source env for 'clone' and the path to yml file for 'yml'."
 exit 1
fi

# Force umask 022 as default for conda packages - See HOPSWORKS-880
umask 022

# Set home directory
USER=<%= node["conda"]["user"] %>
export HOME=/home/${USER}

OP="${1//[^a-zA-Z0-9\.\-\_]/}"
PROJECT="${2//[^a-zA-Z0-9\.\-\_]/}"
ARG="${3//[^a-zA-Z0-9\.\-\_]/}"
OFFLINE="${4//[^a-zA-Z0-9\.\-\_]/}"
HADOOP_DIR="${5//[^a-zA-Z0-9\.\-\_/]/}"
INSTALL_JUPYTER="${6//[^a-zA-Z0-9\.\-\_]/}"
YML_FILE_PATH="${7//[^a-zA-Z0-9\.\-\_/]/}"

CLONE=
CONDA_DIR=<%= node["conda"]["base_dir"] %>
SPARKMAGIC_DIR=<%= node["conda"]["dir"] %>/sparkmagic
WITH_PYTHON_KERNEL=<%= @jupyter_python %>

IS_ENTERPRISE_EDITION=<%= node['install']['enterprise']['install'].downcase.strip %>
JUPYTERLAB_VERSION_PY3=<%= node['conda']['jupyter']['version']['py3'] %>
JUPYTERLAB_VERSION_PY2=<%= node['conda']['jupyter']['version']['py2'] %>
JUPYTERLAB_GIT_VERSION=<%= node['conda']['jupyter']['jupyterlab-git']['version'] %>

if [ "$OP" == "CLONE" ] ; then
   CLONE="--clone $4"
fi

function exists() {
    ${CONDA_DIR}/bin/conda info --envs | grep "^${PROJECT} "
    return $?
}

function is_python3 {
    test_file="$1/bin/python3"
    test -f "$test_file"
}

if [ "$OP" == "YML" ] ; then
   export PATH=${PATH}:${HADOOP_DIR}/bin; ${CONDA_DIR}/bin/conda env create -f ${YML_FILE_PATH} -n ${PROJECT}

   if [ $? -ne 0 ] ; then
       exit 2
   fi

   if [ "$INSTALL_JUPYTER" == "true" ] ; then
        set +e
	is_python3 "${CONDA_DIR}/envs/${PROJECT}"
	is_py3_env=$?

        # Install packages
	set -e
	if [ $is_py3_env -eq 0 ]
	then
	    jupyterlab_version=$JUPYTERLAB_VERSION_PY3
	else
	    jupyterlab_version=$JUPYTERLAB_VERSION_PY2
	fi
        export PATH=${PATH}:${HADOOP_DIR}/bin; yes | ${CONDA_DIR}/envs/${PROJECT}/bin/pip install --no-cache-dir --upgrade hdfscontents urllib3 requests jupyterlab==${jupyterlab_version} pandas tqdm

	## Downgrade notebook to 5.7.8 (HOPSWORKS-1251)
	yes | ${CONDA_DIR}/envs/${PROJECT}/bin/pip install --no-cache-dir --upgrade notebook==5.7.8

	yes | ${CONDA_DIR}/envs/${PROJECT}/bin/pip install --no-cache-dir --upgrade ipywidgets
	${CONDA_DIR}/envs/${PROJECT}/bin/jupyter nbextension enable --py --sys-prefix widgetsnbextension

	# Install wit-widget
	yes | ${CONDA_DIR}/envs/${PROJECT}/bin/pip install --no-cache-dir --upgrade witwidget

	if [ $is_py3_env -eq 0 ]
	then
	    source /usr/local/nvm/nvm.sh; nvm use 10.16.0; ${CONDA_DIR}/envs/${PROJECT}/bin/jupyter labextension install --no-build wit-widget; ${CONDA_DIR}/envs/${PROJECT}/bin/jupyter labextension install --no-build @jupyter-widgets/jupyterlab-manager; ${CONDA_DIR}/envs/${PROJECT}/bin/jupyter labextension install --no-build nbdime-jupyterlab; ${CONDA_DIR}/envs/${PROJECT}/bin/jupyter lab build
	    if [ $IS_ENTERPRISE_EDITION == "true" ]
	    then
		## Hopsworks version has one more digit, remove it to install the upstream labextension
		OLD_IFS=$IFS
		IFS='.' read -r -a array <<< "$JUPYTERLAB_GIT_VERSION"
		IFS=$OLD_IFS
		len=${#array[@]}
		new_array=()
		for (( i=0; i<$len-1; i++))
		do
		    new_array+=("${array[$i]}")
		done
		upstream_version=$(printf ".%s" "${new_array[@]}")
		upstream_version=${upstream_version:1}

		set +e
		test -r "/home/${USER}/jupyterlab_git-${JUPYTERLAB_GIT_VERSION}-py3-none-any.whl"
		if [ $? -eq 0 ]
		then
		    set -e
		    source /usr/local/nvm/nvm.sh; nvm use 10.16.0; ${CONDA_DIR}/envs/${PROJECT}/bin/jupyter labextension install @jupyterlab/git@${upstream_version}; yes | ${CONDA_DIR}/envs/${PROJECT}/bin/pip install --no-cache-dir --upgrade /home/${USER}/jupyterlab_git-${JUPYTERLAB_GIT_VERSION}-py3-none-any.whl; ${CONDA_DIR}/envs/${PROJECT}/bin/jupyter serverextension enable --sys-prefix --py jupyterlab_git
		else
		    set -e
		fi
	    fi
	else
	    set -e
	    source /usr/local/nvm/nvm.sh; nvm use 10.16.0; ${CONDA_DIR}/envs/${PROJECT}/bin/jupyter labextension install --no-build wit-widget; ${CONDA_DIR}/envs/${PROJECT}/bin/jupyter labextension install --no-build @jupyter-widgets/jupyterlab-manager; ${CONDA_DIR}/envs/${PROJECT}/bin/jupyter lab build
	fi

	# DO NOT TOUCH THIS! Bad things are about to happen
	yes | ${CONDA_DIR}/envs/${PROJECT}/bin/pip install --no-cache-dir --upgrade prompt-toolkit==1.0.16
        if [ $? -ne 0 ] ; then
            exit 2
        fi

        if [ <%= node['conda']['hops-util-py']['install-mode'] %> == "git" ] ; then
            yes | ${CONDA_DIR}/envs/${PROJECT}/bin/pip install git+https://github.com/<%= node['conda']['hops-util-py']['repo'] %>/hops-util-py@<%= node['conda']['hops-util-py']['branch'] %>
        else
            yes | ${CONDA_DIR}/envs/${PROJECT}/bin/pip install hops==<%= node['conda']['hops-util-py']['version'] %>
        fi

        yes | ${CONDA_DIR}/envs/${PROJECT}/bin/pip install --no-cache-dir --upgrade $SPARKMAGIC_DIR/hdijupyterutils $SPARKMAGIC_DIR/autovizwidget $SPARKMAGIC_DIR/sparkmagic
        if [ $? -ne 0 ] ; then
            exit 2
        fi

        # Enable kernels
        cd ${CONDA_DIR}/envs/${PROJECT}/lib/python*/site-packages && ${CONDA_DIR}/envs/${PROJECT}/bin/jupyter-kernelspec install sparkmagic/kernels/sparkkernel --sys-prefix
        if [ $? -ne 0 ] ; then
            exit 2
        fi

        cd ${CONDA_DIR}/envs/${PROJECT}/lib/python*/site-packages && ${CONDA_DIR}/envs/${PROJECT}/bin/jupyter-kernelspec install sparkmagic/kernels/pysparkkernel --sys-prefix
        if [ $? -ne 0 ] ; then
            exit 2
        fi

        cd ${CONDA_DIR}/envs/${PROJECT}/lib/python*/site-packages && ${CONDA_DIR}/envs/${PROJECT}/bin/jupyter-kernelspec install sparkmagic/kernels/pyspark3kernel --sys-prefix
        if [ $? -ne 0 ] ; then
            exit 2
        fi

        cd ${CONDA_DIR}/envs/${PROJECT}/lib/python*/site-packages && ${CONDA_DIR}/envs/${PROJECT}/bin/jupyter-kernelspec install sparkmagic/kernels/sparkrkernel --sys-prefix
        if [ $? -ne 0 ] ; then
            exit 2
        fi
   fi

elif [ "$OP" == "EXPORT" ] ; then
     export PATH=${PATH}:${HADOOP_DIR}/bin; ${CONDA_DIR}/bin/conda env export -n ${PROJECT} > ${YML_FILE_PATH}

     if [ $? -ne 0 ] ; then
         exit 2
     fi

elif [ "$OP" == "CREATE" ] ; then
    exists
    if [ $? -eq 0 ] ; then
       exit 0
    fi

    if [[ $ARG =~ .*X ]] ; then
       ARG=${ARG::-1} # removes the 'X' at the end of the version
       WITH_PYTHON_KERNEL="false"
    fi
    PY=${ARG//\./}

    if [ "$PY" == "27" ] ; then
      ${CONDA_DIR}/bin/conda create -n $PROJECT --clone python27 -y -q $OFFLINE
    else
      ${CONDA_DIR}/bin/conda create -n $PROJECT --clone python36 -y -q $OFFLINE
    fi


elif [ "$OP" == "LIST_ENVS" ] ; then
  ${CONDA_DIR}/bin/conda env list --json > /tmp/conda_envs.json

elif [ "$OP" == "LIST" ] ; then
  ${CONDA_DIR}/bin/conda list -n $PROJECT --json > /tmp/${PROJECT}__conda_list.json

elif [ "$OP" == "CLONE" ] ; then
  ${CONDA_DIR}/bin/conda create -n $PROJECT --clone $CLONE -y -q $OFFLINE

  # Enable jupyter notebook extensions
  ${CONDA_DIR}/envs/${PROJECT}/bin/jupyter contrib nbextension install --sys-prefix
  ${CONDA_DIR}/envs/${PROJECT}/bin/jupyter serverextension enable jupyter_nbextensions_configurator --sys-prefix

elif [ "$OP" == "LIB_SYNC" ] ; then

    ${CONDA_DIR}/bin/conda list -n $1 --json > /tmp/${1}.json
    if [ $? -ne 0 ] ; then
	echo "Problem listing conda libraries for project $1"
	exit 2
    fi
    if [ ! -f "/tmp/${1}.json" ] ; then
	echo "Problem finding fil with list of conda libraries for project $1"
	exit 2
    fi
    arr=( $(jq -r '.[].dist_name' "/tmp/${1}.json") )
    printf '%s ' "${arr[@]}" > "/tmp/${1}.libs"

    # kagent has to take the one big json object and save it locally as one json object per project.
    server_libs=( $(jq -r  '.[].library' "/tmp/${1}_server.json") )

    # For all the libs installed in Hopsworks, check each one is installed in the local conda environment
    #for i in "${arr[@]}"
    for i in "${server_libs[@]}"
    do
	# If i cannot find the library installed locally, install it in this project
	grep "$i" "/tmp/${1}.libs"
	if [ $? -ne 0 ] ; then
	   ${CONDA_DIR}/bin/conda install -n $1 -q -y $2 $i
	fi
    done

elif [ "$OP" == "REMOVE" ] ; then
    exists    # If the env has already been removed, return OK
    if [ $? -ne 0 ] ; then
       echo "Cannot remove environment that doesn't exist"
       exit 0
    fi
    ${CONDA_DIR}/bin/conda-env remove -n $PROJECT -y -q
    rm -rf "${CONDA_DIR}/envs/${PROJECT}"

elif [ "$OP" == "CLEAN" ] ; then
    ${CONDA_DIR}/bin/conda clean --all -y
elif [ "$OP" == "UPDATE" ] ; then
    ${CONDA_DIR}/bin/conda update conda -y
else
    exit -1
fi
