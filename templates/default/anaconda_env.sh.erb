#!/bin/bash

if [ $# -lt 7  ]; then
    echo "<user> <op> <proj> <arg> <offline> <hadoop_home>"
    echo "incorrect usage."
    echo "<arg> is the python version for 'create' and the source env for 'clone'."
 exit 1
fi

EXEC_AS_USER=$1
OP=$2
PROJECT=$3
PYTHON_VERSION=$4
OFFLINE=$5
HADOOP_DIR=$6
YML=$7

CLONE=
CONDA_DIR=<%= node["conda"]["base_dir"] %>
WITH_PYTHON_KERNEL=<%= @jupyter_python %>

if [ "$OP" == "CLONE" ] ; then
   CLONE="--clone $4"
fi

if [ "$OP" == "YML" ] ; then
   su $EXEC_AS_USER -c "export HADOOP_HOME=${HADOOP_DIR}; ${CONDA_DIR}/bin/conda env create -f ${YML} -n ${PROJECT}"
fi

function exists() {
    su $EXEC_AS_USER -c "${CONDA_DIR}/bin/conda info --envs | grep '^${PROJECT} '"
    return $?
}

if [ "$OP" == "CREATE" ] ; then
    exists
    if [ $? -eq 0 ] ; then 
       exit 0
    fi

    if [[ $PYTHON_VERSION =~ .*X ]] ; then
       PYTHON_VERSION=${PYTHON_VERSION::-1} # removes the 'X' at the end of the version
       WITH_PYTHON_KERNEL="false"
    fi
    PY=$(echo $PYTHON_VERSION | sed 's/\.//g')
    
    if [ "$PY" == "27" ] ; then
      su $EXEC_AS_USER -c "nice -n -20 ${CONDA_DIR}/bin/conda create -n $PROJECT --clone python27 -y -q $OFFLINE"
    else
      su $EXEC_AS_USER -c "nice -n -20 ${CONDA_DIR}/bin/conda create -n $PROJECT --clone python36 -y -q $OFFLINE"	
    fi

    
elif [ "$OP" == "LIST_ENVS" ] ; then
  su $EXEC_AS_USER -c "${CONDA_DIR}/bin/conda env list --json > /tmp/conda_envs.json"    

elif [ "$OP" == "LIST" ] ; then
  su $EXEC_AS_USER -c "${CONDA_DIR}/bin/conda list -n $PROJECT --json > /tmp/${PROJECT}__conda_list.json"

elif [ "$OP" == "CLONE" ] ; then
  su $EXEC_AS_USER -c "${CONDA_DIR}/bin/conda create -n $PROJECT --clone $CLONE -y -q $OFFLINE"

elif [ "$OP" == "LIB_SYNC" ] ; then

    su <%= node['conda']['user'] %> -c "<%= node['conda']['base_dir'] %>/bin/conda list -n $1 --json > /tmp/${1}.json"
    if [ $? -ne 0 ] ; then
	echo "Problem listing conda libraries for project $1"
	exit 2
    fi
    if [ ! -f /tmp/${1}.json ] ; then
	echo "Problem finding fil with list of conda libraries for project $1"
	exit 2
    fi
    arr=( $(jq -r '.[].dist_name' /tmp/${1}.json) )
    printf '%s ' "${arr[@]}" > /tmp/${1}.libs

    # kagent has to take the one big json object and save it locally as one json object per project.
    server_libs=( $(jq -r  '.[].library' /tmp/${1}_server.json) )

    # For all the libs installed in Hopsworks, check each one is installed in the local conda environment
    #for i in "${arr[@]}"
    for i in "${server_libs[@]}"
    do
	# If i cannot find the library installed locally, install it in this project
	grep $i /tmp/${1}.libs
	if [ $? -ne 0 ] ; then
	    su <%= node['conda']['user'] %> -c "<%= node['conda']['base_dir'] %>/bin/conda install -n $1 -q -y $2 $i"
	fi
    done
    
elif [ "$OP" == "REMOVE" ] ; then
    PROJECTUSERNAME=$PYTHON_VERSION
    exists    # If the env has already been removed, return OK
    if [ $? -ne 0 ] ; then
       echo "Cannot remove environment that doesn't exist"
       exit 0
    fi
    su $EXEC_AS_USER -c "${CONDA_DIR}/bin/conda-env remove -n $PROJECT -y -q"
    rm -rf ${CONDA_DIR}/envs/${PROJECT}
    if [ "${WITH_PYTHON_KERNEL}" == "true" ] ; then
	kernelsToDelete=$(sudo jupyter-kernelspec list | grep ${PROJECT}__ | sed -e 's/.*\/usr\/local\/share\/jupyter\/kernels\///g')
        echo "Kernels to delete:"
        echo $kernelsToDelete
        if [ "$kernelsToDelete" != "" ] ; then
	  while read -r kernel; do
             echo "sudo jupyter-kernelspec remove -y -f ${kernel}"
             sudo jupyter-kernelspec remove -y -f ${kernel} || 0
	  done <<< "$kernelsToDelete"
        fi
    fi

else
    exit -1
fi
